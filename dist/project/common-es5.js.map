{"version":3,"sources":["webpack:///src/app/shared/ingredient.model.ts","webpack:///src/app/shopping-list/shopping-service.service.ts"],"names":["Ingredient","name","amount","ShoppingServiceService","recipeService","ingredientAdded","startedEditing","ingredients","slice","index","ingredient","push","next","splice","ing","providedIn"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAAaA,U,GACT;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA,wBAAmBC,IAAnB,EAAwCC,MAAxC,EAAwD;AAAA;;AAArC,WAAAD,IAAA,GAAAA,IAAA;AAAqB,WAAAC,MAAA,GAAAA,MAAA;AAAkB,K;;;;;;;;;ACZ9D;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAQaC,sB;AAGX,sCAAoBC,aAApB,EAA0D;AAAA;;AAAtC,aAAAA,aAAA,GAAAA,aAAA;AAFpB,aAAAC,eAAA,GAAkB,IAAI,4CAAJ,EAAlB;AACA,aAAAC,cAAA,GAAiB,IAAI,4CAAJ,EAAjB;AAIQ,aAAAC,WAAA,GAA6B,CACnC,IAAI,mEAAJ,CAAe,QAAf,EAAwB,CAAxB,CADmC,EAEnC,IAAI,mEAAJ,CAAe,UAAf,EAA0B,EAA1B,CAFmC,CAA7B;AAFP;;;;eAOD,oBAAW,CAEV;;;eAED,yBAAa;AACX,iBAAO,KAAKA,WAAL,CAAiBC,KAAjB,EAAP;AACD;;;eAED,8BAAqBC,KAArB,EAAmC;AACjC,iBAAO,KAAKF,WAAL,CAAiBE,KAAjB,CAAP;AACD;;;eAED,uBAAcC,UAAd,EAAqC;AACnC,eAAKH,WAAL,CAAiBI,IAAjB,CAAsBD,UAAtB;AACA,eAAKL,eAAL,CAAqBO,IAArB,CAA0B,KAAKL,WAAL,CAAiBC,KAAjB,EAA1B;AACD;;;eAED,0BAAiBC,KAAjB,EAAiCC,UAAjC,EAAwD;AACtD,eAAKH,WAAL,CAAiBE,KAAjB,IAA0BC,UAA1B;AACA,eAAKL,eAAL,CAAqBO,IAArB,CAA0B,KAAKL,WAAL,CAAiBC,KAAjB,EAA1B;AACD;;;eAED,0BAAiBC,KAAjB,EAA+B;AAC7B,eAAKF,WAAL,CAAiBM,MAAjB,CAAwBJ,KAAxB,EAA8B,CAA9B;AACA,eAAKJ,eAAL,CAAqBO,IAArB,CAA0B,KAAKL,WAAL,CAAiBC,KAAjB,EAA1B;AACD;;;eAED,kCAAyBM,GAAzB,EAA2C;AAAA;;AACzC;AACA;AACA;AACA,oCAAKP,WAAL,EAAiBI,IAAjB,6CAAyBG,GAAzB,GAJyC,CAIA;;;AACzC,eAAKT,eAAL,CAAqBO,IAArB,CAA0B,KAAKL,WAAL,CAAiBC,KAAjB,EAA1B;AACD;;;;;;;uBA5CUL,sB,EAAsB,2I;AAAA,K;;;aAAtBA,sB;AAAsB,eAAtBA,sBAAsB,K;AAAA,kBAFrB;;;;;sEAEDA,sB,EAAsB;cAHlC,wDAGkC;eAHvB;AACVY,oBAAU,EAAE;AADF,S;AAGuB,Q","file":"common-es5.js","sourcesContent":["export class Ingredient{\r\n    // public name: string;\r\n    // public amount: number;\r\n\r\n    // constructor(name,amount){\r\n    //     this.name=name;\r\n    //     this.amount=amount;\r\n    // }\r\n\r\n\r\n    // below contriuctor will do the same work as above lines.....\r\n    //it will automatically assign the values to name and amount\r\n    constructor(public name: string, public amount: number) {}\r\n}","import { Injectable, OnInit } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { RecipeServiceService } from '../recipe/recipe-service.service';\nimport { Ingredient } from '../shared/ingredient.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ShoppingServiceService implements OnInit {\n  ingredientAdded = new Subject<Ingredient[]>();\n  startedEditing = new Subject<number>();\n  constructor(private recipeService : RecipeServiceService) { \n  }\n\n  private ingredients : Ingredient[] = [\n    new Ingredient(\"Apples\",5),\n    new Ingredient(\"Tomatoes\",10)\n  ]\n\n  ngOnInit() : void{\n    \n  }\n\n  getIngredient(){\n    return this.ingredients.slice();\n  }\n\n  getIngredientByIndex(index : number){\n    return this.ingredients[index];\n  }\n\n  addIngredient(ingredient : Ingredient){\n    this.ingredients.push(ingredient);\n    this.ingredientAdded.next(this.ingredients.slice());\n  }\n\n  updateIngredient(index : number, ingredient : Ingredient){\n    this.ingredients[index] = ingredient;\n    this.ingredientAdded.next(this.ingredients.slice());\n  }\n\n  deleteIngredient(index : number){\n    this.ingredients.splice(index,1)\n    this.ingredientAdded.next(this.ingredients.slice());\n  }\n\n  addIngredientsFromRecipe(ing : Ingredient[]){\n    // for(let i of ing){\n    //   this.ingredients.push(i);\n    // }\n    this.ingredients.push(...ing);           //another method to push whole array to another arr\n    this.ingredientAdded.next(this.ingredients.slice());\n  }\n}\n"]}