{"version":3,"sources":["webpack:///src/app/auth/auth.component.ts","webpack:///src/app/auth/auth.component.html","webpack:///src/app/auth/auth.module.ts"],"names":["AuthComponent","authService","router","isLoginMode","isLoading","error","authForm","valid","email","value","password","authObs","signUp","login","subscribe","response","navigate","errorRes","console","log","reset","selector","templateUrl","styleUrls","AuthModule","forChild","path","component","declarations","imports"],"mappings":"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","file":"auth-auth-module-es5.js","sourcesContent":["import { HttpClient, HttpClientModule } from '@angular/common/http';\nimport { Component, OnInit } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { AuthResponse, AuthService } from './auth.service';\n\n@Component({\n  selector: 'app-auth',\n  templateUrl: './auth.component.html',\n  styleUrls: []\n})\nexport class AuthComponent implements OnInit {\n  isLoginMode = true;\n  isLoading = false;\n  error : string = null;\n\n  authObs : Observable<AuthResponse>;\n\n  constructor(private authService : AuthService, private router : Router) { }\n\n  ngOnInit(): void {\n  }\n\n  onSwitchMode(){\n    this.isLoginMode = !this.isLoginMode;\n  }\n\n  onSubmit(authForm : NgForm){\n    this.error = null;\n    if(!authForm.valid)\n      return;\n\n    const email = authForm.value.email;\n    const password = authForm.value.password;\n    this.isLoading = true;  //to activate the loading spinner\n\n    if(!this.isLoginMode){\n      this.authObs = this.authService.signUp(email,password);\n    }\n    else{\n      this.authObs = this.authService.login(email,password);\n    }\n\n    //one of the two modes will be activated at one time, and as we need to do same code for subscribing\n    //in either mode, so we saved the subscription in an observable\n    //and then subscribe to that \n\n    this.authObs.subscribe( response => {\n      this.isLoading = false;\n      // on successful signup or login we will redirect the user to another page\n      this.router.navigate(['/recipes']);\n    }, errorRes => {\n      this.error = errorRes;\n      console.log(this.error)\n      this.isLoading = false;\n    })\n\n    authForm.reset();\n  }\n\n  onModalClose(){\n    this.error = null;\n  }\n}\n","<div class=\"row\">\n    <div class=\"col-xs-12 col-md-6 col-md-offset-3\">\n\n        <div *ngIf=\"isLoading\">\n            <app-spinner></app-spinner>\n        </div>\n        <!-- <div class=\"alert alert-danger\" *ngIf=\"error\">\n            {{error}}\n        </div> -->\n        <app-alert [message]=\"error\" *ngIf=\"error\" (close)=\"onModalClose()\"></app-alert>\n        <form #authForm=\"ngForm\" (ngSubmit)=\"onSubmit(authForm)\" *ngIf=\"!isLoading\">\n            <div class=\"form-group\">\n                <label for=\"email\">E-mail</label>\n                <input \n                    type=\"email\" \n                    id=\"email\" \n                    class=\"form-control\"\n                    ngModel \n                    name=\"email\"\n                    required\n                    email\n                    minlength=\"6\">\n            </div>\n            <div class=\"form-group\">\n                <label for=\"password\">Password</label>\n                <input \n                    type=\"password\" \n                    id=\"password\" \n                    class=\"form-control\"\n                    ngModel\n                    name=\"password\">\n            </div>\n            <div>\n                <button \n                    class=\"btn btn-primary\"\n                    type=\"submit\"\n                    [disabled]=\"!authForm.valid\"\n                    >\n                    {{ isLoginMode ? 'Login' : 'SignUp' }}</button> |             \n                <button class=\"btn btn-primary\" (click)=\"onSwitchMode()\" type=\"button\">\n                    Switch to {{ isLoginMode ? 'SignUp' : 'Login' }} mode\n                </button>\n            </div>\n        </form>\n    </div>\n</div>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AuthComponent } from './auth.component';\nimport { RouterModule } from '@angular/router';\nimport { FormsModule } from '@angular/forms';\nimport { SharedModule } from '../shared/shared.module';\n\n\n\n@NgModule({\n  declarations: [\n    AuthComponent,\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    SharedModule,\n    RouterModule.forChild([  { path : '', component : AuthComponent} ])\n  ]\n})\nexport class AuthModule { }\n"]}