{"version":3,"sources":["./src/app/shared/ingredient.model.ts","./src/app/shopping-list/shopping-service.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAO,MAAM,UAAU;IACnB,uBAAuB;IACvB,yBAAyB;IAEzB,4BAA4B;IAC5B,sBAAsB;IACtB,0BAA0B;IAC1B,IAAI;IAGJ,8DAA8D;IAC9D,4DAA4D;IAC5D,YAAmB,IAAY,EAAS,MAAc;QAAnC,SAAI,GAAJ,IAAI,CAAQ;QAAS,WAAM,GAAN,MAAM,CAAQ;IAAG,CAAC;CAC7D;;;;;;;;;;;;;ACbD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmD;AACpB;AAEyB;;;AAKjD,MAAM,sBAAsB;IAGjC,YAAoB,aAAoC;QAApC,kBAAa,GAAb,aAAa,CAAuB;QAFxD,oBAAe,GAAG,IAAI,4CAAO,EAAgB,CAAC;QAC9C,mBAAc,GAAG,IAAI,4CAAO,EAAU,CAAC;QAI/B,gBAAW,GAAkB;YACnC,IAAI,mEAAU,CAAC,QAAQ,EAAC,CAAC,CAAC;YAC1B,IAAI,mEAAU,CAAC,UAAU,EAAC,EAAE,CAAC;SAC9B;IALD,CAAC;IAOD,QAAQ;IAER,CAAC;IAED,aAAa;QACX,OAAO,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;IAClC,CAAC;IAED,oBAAoB,CAAC,KAAc;QACjC,OAAO,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;IACjC,CAAC;IAED,aAAa,CAAC,UAAuB;QACnC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAClC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC,CAAC;IACtD,CAAC;IAED,gBAAgB,CAAC,KAAc,EAAE,UAAuB;QACtD,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,UAAU,CAAC;QACrC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC,CAAC;IACtD,CAAC;IAED,gBAAgB,CAAC,KAAc;QAC7B,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,EAAC,CAAC,CAAC;QAChC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC,CAAC;IACtD,CAAC;IAED,wBAAwB,CAAC,GAAkB;QACzC,qBAAqB;QACrB,8BAA8B;QAC9B,IAAI;QACJ,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,CAAW,mDAAmD;QAC5F,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC,CAAC;IACtD,CAAC;;4FA5CU,sBAAsB;yGAAtB,sBAAsB,WAAtB,sBAAsB,mBAFrB,MAAM;6FAEP,sBAAsB;cAHlC,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB","file":"common-es2015.js","sourcesContent":["export class Ingredient{\r\n    // public name: string;\r\n    // public amount: number;\r\n\r\n    // constructor(name,amount){\r\n    //     this.name=name;\r\n    //     this.amount=amount;\r\n    // }\r\n\r\n\r\n    // below contriuctor will do the same work as above lines.....\r\n    //it will automatically assign the values to name and amount\r\n    constructor(public name: string, public amount: number) {}\r\n}","import { Injectable, OnInit } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { RecipeServiceService } from '../recipe/recipe-service.service';\nimport { Ingredient } from '../shared/ingredient.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ShoppingServiceService implements OnInit {\n  ingredientAdded = new Subject<Ingredient[]>();\n  startedEditing = new Subject<number>();\n  constructor(private recipeService : RecipeServiceService) { \n  }\n\n  private ingredients : Ingredient[] = [\n    new Ingredient(\"Apples\",5),\n    new Ingredient(\"Tomatoes\",10)\n  ]\n\n  ngOnInit() : void{\n    \n  }\n\n  getIngredient(){\n    return this.ingredients.slice();\n  }\n\n  getIngredientByIndex(index : number){\n    return this.ingredients[index];\n  }\n\n  addIngredient(ingredient : Ingredient){\n    this.ingredients.push(ingredient);\n    this.ingredientAdded.next(this.ingredients.slice());\n  }\n\n  updateIngredient(index : number, ingredient : Ingredient){\n    this.ingredients[index] = ingredient;\n    this.ingredientAdded.next(this.ingredients.slice());\n  }\n\n  deleteIngredient(index : number){\n    this.ingredients.splice(index,1)\n    this.ingredientAdded.next(this.ingredients.slice());\n  }\n\n  addIngredientsFromRecipe(ing : Ingredient[]){\n    // for(let i of ing){\n    //   this.ingredients.push(i);\n    // }\n    this.ingredients.push(...ing);           //another method to push whole array to another arr\n    this.ingredientAdded.next(this.ingredients.slice());\n  }\n}\n"],"sourceRoot":"webpack:///"}